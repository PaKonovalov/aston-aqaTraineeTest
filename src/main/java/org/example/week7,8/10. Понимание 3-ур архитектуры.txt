Это архитектурный шаблон, в котором присутствует три уровня.

При использовании этого шаблона, три уровня принято называть слоями:
    Клиентский слой — интерфейс пользователя. Это может быть веб-браузер, которому отправляются HTML-страницы,
    или графическое приложение, написанное с помощью JavaFX. Главное, чтобы с его помощью пользователь мог
    отправлять запросы на сервер и обрабатывать его ответы.

    Слой логики (тут бизнес-логика) — сервер, на котором происходит обработка запросов/ответов. Часто его еще
    называют серверным слоем.Также здесь происходят все логические операции: математические расчеты, операции
    с данными, обращения к другим сервисам или хранилищам данных. Тут сосредоточена большая часть бизнес-логики.

    Слой данных — сервер баз данных: к нему обращается наш сервер. В этом слое сохраняется вся необходимая
    информация, которой пользуется приложение при работе.

Таким образом, наш сервер принимает на себя все обязательства по обращению к данным, не давая возможности юзеру
обратиться к ним напрямую.

Преимущества трехуровневой архитектуры:

    - Возможность построить защиту от SQL-инъекций — это атака на сервер, при которой передается SQL-код, и при
    выполнении этого кода злоумышленник может воздействовать на нашу базу данных.

    - Разграничение данных, к которым мы хотим регулировать пользовательский доступ.

    - Возможность модифицировать данные перед отправкой клиенту.

    - Масштабируемость — возможность расширить наше приложение на несколько серверов, которые будут использовать
    одну и ту же базу данных.

    - Меньшие требования к качеству соединения пользователя. Формируя ответ на сервере, мы часто берем из базы
    данных много различной информации, форматируем ее, оставляя только то, что нужно юзеру. Таким образом мы
    сокращаем объем информации, который отправим в качестве ответа клиенту.

Недостатки трехуровневой архитектуры (по сравнению с клиент-серверой архитектурой):

    - более высокая сложность создания приложений;

    - сложнее в разворачивании и администрировании;

    - высокие требования к производительности серверов приложений и сервера базы данных, а, значит, и высокая
    стоимость серверного оборудования;

    - высокие требования к скорости канала (сети) между сервером базы данных и серверами приложений

Другие виды архитектур:

    1. клиент-серверная архитектура
        Клиент — пользователь  веб-приложения
        Сервер — место, где располагается твое веб-приложение или его серверная часть
        Сеть - интернет

Фундаментальное правило трехуровневой архитектуры заключается в том, что клиентский уровень никогда
не взаимодействует напрямую с уровнем данных; в трехуровневой модели все коммуникации должны проходить
через средний уровень.