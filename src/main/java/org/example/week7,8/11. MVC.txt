Архитектура MVC позволяет нам разделить код приложения на 3 части: Модель (Model), Вид или Представление (View)
и Контроллер (Controller).

Разделение на части позволяет упростить большой по объему код. Если код писать одним длинным скриптом, в нем
становится тяжело разобраться, и тяжело вносить изменения, не допустив ошибку.

    - МОДЕЛЬ содержит в себе всю логику приложения, она хранит и обрабатывает данные, при этом не взаимодействуя с
    пользователем напрямую (обратиться к Модели можно только из кода, вызывая ее функции). Например, сохранение
    информации в БД, проверка правильности введенных в форму данных — это задача Модели, но получение этих данных
    от пользователя или вывод информации на экран или обработка нажатия на кнопку — нет.

    Модель не должна никак зависеть и не должна ничего знать о Контроллерах и Видах.

    Модель это не один класс или набор однотипных классов. Это основная часть приложения, которая может содержать
    много разных классов: сервисы, классы для взаимодействия с БД, сущности, валидаторы. В не-ООП приложении
    модель может просто представлять собой набор функций.

    - ПРЕДСТАВЛЕНИЕ отображает данные, которые ему передали. В веб-приложении оно обычно состоит из HTML-шаблонов
    страниц, в десктопных или мобильных приложениях Преставление - это код, который отвечает за отображение
    информации на экране, отрисовку кнопочек и других элементов интерфейса.

    В PHP оно не должно обращаться к внешним переменным ($_GET и другие), его задача просто отобразить те данные,
    которые ему передали.

    Может существовать несколько разных Представлений для вывода одних и тех же данных, например, в виде таблицы,
    графика или xls-файла.

    - КОНТРОЛЛЕР отвечает за выполнение запросов, пришедших от пользователя. В веб-приложении обычно контроллер
    разбирает параметры HTTP-запроса из $_POST/$_GET, обращается к модели, чтобы получить или изменить какие-то
    данные, и в конце вызывает Представление, чтобы отобразить результат выполнения запроса. Число контроллеров
    определяется числом разделов или страниц сайта. В десктопных приложениях Контроллер отвечает за обработку
    нажатий на кнопки и других воздействий от пользователя.

    Один Контроллер может работать с несколькими Моделями, и наоборот, одна Модель может использоваться в
    нескольких Контроллерах.

Весь функционал приложения содержится в модели. Контроллер и вью предоставляют лишь возможность пользователю
взаимодействовать с моделью и отображать данные из нее.

Взаимодействие компонентов MVC

В серверных приложениях обычно используется "пассивная" модель, а в десктопных приложениях - "активная". Активная
модель, в отличие от пассивной, позволяет подписываться и получать уведомления об изменении в ней.

    В схеме с активной моделью Вид подписывается на изменения в Модели. Затем, когда происходит какое-то событие
    (например, пользователь нажимает кнопку), вызывается Контроллер. Он дает Модели команду на изменение данных.
    Модель сообщает своим подписчикам (в том числе Виду), что данные изменились, и Вид обновляет интерфейс
    программы. Схема с активной моделью напоминает кольцо или цикл.

    В серверных приложениях используется схема с пассивной моделью. Допустим, пользователь заходит на страницу
    форума. Его браузер отправляет HTTP запрос на получение страницы со списком сообщений. При этом запускается
    Контроллер, который анализирует запрос пользователя и запрашивает у Модели список сообщений. Получив его,
    он вызывает Вид и передает ему список, и тот отображает его в виде веб-страницы. После этого скрипт
    завершается.