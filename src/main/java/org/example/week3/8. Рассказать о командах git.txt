1. git branch
    - git branch показать все ветки (текущая отмечена *)
    - git branch branch_name Создать новую ветку но не переключаться на нее
    - git checkout -b branch_name Создать новую ветку и переключться на нее
    - git checkout branch_name переключиться на существующую ветку

2. git stash
    - создает сохранение без коммита, напр удобно при переключении на др ветку без коммита
    - git stash pop Чтобы применить ранее отложенные изменения
    - git stash list просмотреть список созданных отложенных изменений
    - git stash drop + stash number Удалить определенный набор отложенных изменений
    - git stash clear удаляет все наборы отложенных изменений
    - для применения изменений в другой ветке:
        - переключиться на нужную ветку;
        - ввести git stash pop.

3. git merge
    в текущей ветке вводим git merge + branch name (которую вливаем) + текст коммита + enter

4. pull request
    - запрос на слияние с базовой веткой
    - GitHub - pull request, GitLab - merge request
    - merge pull request при этом все коммиты ветки коммиты мерджа будут перенесены в базовую ветку

5. git rebase
    вид merge request, при этом мы выбираем rebase and merge, коммиты вливаемой ветки будут выглядеть так
    как будто они делались в базовой ветке при этом не будет коммита со слиянием

6. git revert
Создает новий коммит,который будет прямо противоположен тому, который хотим убрать (противополжый тому, который удаляем)
Применяется для удаленного репозитория
    - команда, отменяющая изменения переданного коммита.
    - при столкновении с конфликтом во время отката и передумали продолжать git revert,
    выполните команду git revert --abort

7. git reset
Применяется для локального репозитория
Он имеет три основные формы вызова. Эти формы соответствуют аргументам командной строки --soft, --mixed, --hard
    - git reset --soft имя коммита, сброс до указанного коммита (попадут в индекс)
    - git reset --mexed C, сброс в смешанном режиме, при этом (git reset HEAD~1 сбросит последний один коммит,
    ~2 -два последних коммита, но данные изменения не попадут в индекс (будут не закоммичены))
    - git reset --hard C имя коммита, при этом имя указанного коммита будет последним, удаляет безвозвратно
    - git commit --amend -m + "комментарий"
    - git commit --amend --no-edit добавит забытый для коммита файл

8. git config
    - git config --global user.name "name" задать имя пользователя
    - git config --global user.email "email" задать почту
    - git config --list проверка настроек

9. git chery-peak
    Используется:
    - для хот фикс багов. взять отдельный коммит с исправленными багами и отправить в мастер
    - взять отдельный коммит из другой ветки и перенести в свою
    - востановление или сохранение потерянных коммитов

    Использование:
    - войти в ветку, в которую вставляем, git chery-peak "хэш коммита"
    - можно добавить в онце запроса - edit для обновления сообщения коммита
    - --no -commit, гит берет коммит из нашей ветки и помещает в текущую директорию

10. git fetch - скачивает изменения с УР в ЛР но не применяет их

11. git pull - скачивает изменения с УР в ЛР и сразу их применяешь (merge + fetch)