1. Predicate<T> проверяет соблюдение некоторого условия. Если оно соблюдается, то возвращается значение true.
В качестве параметра лямбда-выражение принимает объект типа T:
    public interface Predicate<T> {
        boolean test(T t);
    }

Пример:
    public class LambdaApp {

        public static void main(String[] args) {
            Predicate<Integer> isPositive = x -> x > 0;

            System.out.println(isPositive.test(5)); // true
            System.out.println(isPositive.test(-7)); // false
        }
    }

2. BinaryOperator<T> принимает в качестве параметра два объекта типа T, выполняет над ними бинарную операцию и
возвращает ее результат также в виде объекта типа T:
    public interface BinaryOperator<T> {
        T apply(T t1, T t2);
    }

Пример:
    public class LambdaApp {

        public static void main(String[] args) {
            BinaryOperator<Integer> multiply = (x, y) -> x*y;

            System.out.println(multiply.apply(3, 5)); // 15
            System.out.println(multiply.apply(10, -2)); // -20
        }
    }

3. UnaryOperator<T> принимает в качестве параметра объект типа T, выполняет над ними операции и возвращает
результат операций в виде объекта типа T:
    public interface UnaryOperator<T> {
        T apply(T t);
    }

Пример:
    public class LambdaApp {

        public static void main(String[] args) {
            UnaryOperator<Integer> square = x -> x*x;
            System.out.println(square.apply(5)); // 25
        }
    }

4. Function<T,R> представляет функцию перехода от объекта типа T к объекту типа R:
    public interface Function<T, R> {
        R apply(T t);
    }

Пример:
    import java.util.function.Function;

    public class LambdaApp {

        public static void main(String[] args) {
            Function<Integer, String> convert = x-> String.valueOf(x) + " долларов";
            System.out.println(convert.apply(5)); // 5 долларов
        }
    }

5. Consumer<T> выполняет некоторое действие над объектом типа T, при этом ничего не возвращая:
    public interface Consumer<T> {
        void accept(T t);
    }

Пример:
    public class LambdaApp {

        public static void main(String[] args) {
            Consumer<Integer> printer = x-> System.out.printf("%d долларов \n", x);
            printer.accept(600); // 600 долларов
        }
    }

6. Supplier<T> не принимает никаких аргументов, но должен возвращать объект типа T:
    public interface Supplier<T> {
        T get();
    }

Пример:
    public class LambdaApp {

        public static void main(String[] args) {
            Supplier<User> userFactory = ()->{
                Scanner in = new Scanner(System.in);
                System.out.println("Введите имя: ");
                String name = in.nextLine();
                return new User(name);
            };

            User user1 = userFactory.get();
            User user2 = userFactory.get();

            System.out.println("Имя user1: " + user1.getName());
            System.out.println("Имя user2: " + user2.getName());
        }
    }
    class User{

        private String name;
        String getName(){
            return name;
        }

        User(String n){
            this.name=n;
        }
    }