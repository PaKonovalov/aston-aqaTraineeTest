Stream API — этспособ работать со структурами данных в функциональном стиле.

    1.List<String> list = new ArrayList<String>();
    2.list.add("One");
    …
    11.list.add("Ten");
    12.Stream stream = list.stream();
    13.stream.filter(x-> x.toString().length() == 3).forEach(System.out::println);

Операторы можно разделить на две группы:
    - Промежуточные — обрабатывают поступающие элементы и возвращают стрим.
    Промежуточных операторов в цепочке обработки элементов может быть много.
    - Терминальные — обрабатывают элементы и завершают работу стрима, так что терминальный оператор
    в цепочке может быть только один.

некоторые промежуточные операторы:
    - filter(Predicate predicate) фильтрует стрим, пропуская только те элементы, что проходят по условию
    (Predicate встроенный функциональный интерфейс, добавленный в Java SE 8 в пакет java.util.function.
    Проверяет значение на “true” и “false”);
    - map(Function mapper) даёт возможность создать функию с помощью которой мы будем изменять каждый элемент
    и пропускать его дальше (Функциональный интерфейс Function<T,R> представляет функцию перехода от объекта
    типа T к объекту типа R)
    - flatMap(Function<T, Stream<R>> mapper) — как и в случае с map, служат для преобразования в примитивный
    стрим.
    - IntStream.range(0,x) – выдаёт на поток элементов с 0 (включительно) по x (не включительно);
    - limit(long maxSize) – ограничивает стрим по количеству элементов:
    - skip(long n) – пропускаем n элементов:
    - sorted()
    sorted(Comparator comparator) – сортирует стрим (сортировка как у TreeMap)
    - distinct() — проверяет стрим на уникальность элементов(убирает повторы элементов);

Терминальные операторы:
    - forEach(Consumer action) – аналог for each (Consumer<T> выполняет некоторое действие над объектом типа T,
    при этом ничего не возвращая);
    - count() – возвращает количество елементов стрима
    - collect(Supplier supplier, BiConsumer accumulator, BiConsumer combiner) — тот же, что и
    collect(collector), только параметры разбиты для удобства (supplier поставляет новые объекты (контейнеры),
    например new ArrayList(), accumulator добавляет элемент в контейнер, combiner объединяет части стрима
    воедино);
    - reduce(T identity, BinaryOperator accumulator) — преобразовывает все элементы стрима в один объект
    (посчитать сумму всех элементов, либо найти минимальный элемент), cперва берётся объект identity и первый
    элемент стрима, применяется функция accumulator и identity становится её результатом. Затем всё продолжается
    для остальных элементов.

некоторые методы Collectors:
    - toList() — собирает элементы в List:
    List<Integer> list = Stream.of(99, 2, 3).collect(Collectors.toList());
    -toSet() — cобирает элементы в множество:
    Set<Integer> set = Stream.of(99, 2, 3).collect(Collectors.toSet());
    - counting() — Подсчитывает количество элементов:
    Long count = Stream.of("1", "2", "3", "4").collect(Collectors.counting())