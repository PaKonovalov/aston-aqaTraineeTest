1. Принцип единственной ответственности (Single Responsibility Principle)
    Один класс должен решать только какую-то одну задачу. Он может иметь несколько методов, но они должны
    использоваться лишь для решения общей задачи. Если класс имеет несколько назначений, его нужно разделить
    на отдельные классы.

2. Принцип открытости/закрытости (Open-closed Principle)
    Программные сущности должны быть открыты для расширения, но закрыты для модификации.
    Программные сущности (классы, модули, функции и прочее) должны быть расширяемыми без изменения своего
    содержимого.

3. Принцип подстановки Барбары Лисков (Liskov Substitution Principle)
    подкласс/производный класс должен быть взаимозаменяем с базовым/родительским классом.
    Значит, любая реализация абстракции (интерфейса) должна быть взаимозаменяемой в любом месте, в котором
    принимается эта абстракция.

4. Принцип разделения интерфейса (Interface Segregation Principle)
    Нельзя заставлять клиента реализовать интерфейс, которым он не пользуется.

5. Принцип инверсии зависимостей (Dependency Inversion Principle)
    Абстракции не должны зависеть от подробностей. Подробности должны зависеть от абстракций.